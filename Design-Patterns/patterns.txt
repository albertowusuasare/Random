/*
 * Author : Albert Owusu-Asare
 * Date   : Tue Mar 17 15:03:23 CDT 2015
 * 
 * Contains notes about the common design patterns
 *
 */


/*********************

  Observer Pattern

***********************/
i) What is it?
ii) Whys is it important

Here an object (the observer) listens for changes in the state of another 
object (the subject). Obejcts can subscribe or unsubscribe to being an
observer of another object.


The observer design pattern is used in most of the JDK and other SDKs. 
Most times in our projects objects are going to change their states. It is mostly 
the case that we listen in to whether an objects state has been changed and respond accordingly.
The observer pattern is observed to be in play in the MVC pattern for Android and many web applications.


In short we say that the observer pattern defines a one to many relationship among objects such 
that when one object's state changes, all the others get notified.


To use such a model we might need to set up the following:

1. Observable : this is an interface that the subject is going to implement.
                Common methods may include :

                 -> addObserver()
         	 -> removeObserver()
		 -> notifyObservers()
2. Observer : This is an interface that all observers must implement.
               Common methods inlclude:
	       -> update() for updating observer when state of subject is changed.


Note that java has its own version of Observable and Observer that you may use in your design.
